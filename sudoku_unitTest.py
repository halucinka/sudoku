#!/usr/bin/env python3

# Lucia Pal, 2016

'''
Unit tests for sudoku.
'''

import sudoku
import unittest

class Test_sudoku(unittest.TestCase):
    def testEmpty(self):
        sud = (' -------------------------------------' + '\n'
        +'|   |   |   ||   |   |   ||   |   |   |' + '\n'
        +' ------------------------------------- ' + '\n'
        +'|   |   |   ||   |   |   ||   |   |   |' + '\n'
        +' ------------------------------------- ' + '\n'
        +'|   |   |   ||   |   |   ||   |   |   |' + '\n'
        +' ===================================== ' + '\n'
        +'|   |   |   ||   |   |   ||   |   |   |' + '\n'
        +' ------------------------------------- ' + '\n'
        +'|   |   |   ||   |   |   ||   |   |   |' + '\n'
        +' ------------------------------------- ' + '\n'
        +'|   |   |   ||   |   |   ||   |   |   |' + '\n'
        +' ===================================== ' + '\n'
        +'|   |   |   ||   |   |   ||   |   |   |' + '\n'
        +' ------------------------------------- ' + '\n'
        +'|   |   |   ||   |   |   ||   |   |   |' + '\n'
        +' ------------------------------------- ' + '\n'
        +'|   |   |   ||   |   |   ||   |   |   |' + '\n'
        +' ------------------------------------- ' + '\n')
        S = sudoku.Sudoku()
        S.readInputSudoku(sud)
        S.solveSudoku()
        valid = True
        for i in range(9):
            numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
            for j in range(9):
                if (S.solution[j][i] in numbers):
                    numbers.remove(S.solution[j][i])
                else:
                    valid = False
                    break
            if (len(numbers) > 0):
                valid = False
                break
        numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        for i in range(9):
            numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
            for j in range(9):
                if (S.solution[i][j] in numbers):
                    numbers.remove(S.solution[i][j])
                else:
                    valid = False
                    break
            if (len(numbers) > 0):
                valid = False
                break
        for square_x in range(3):
            for square_y in range(3):
                numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

                for i in range(3):
                    for j in range(3):

                        if (S.solution[3*square_x + i][3*square_y + j] in numbers):

                            numbers.remove(S.solution[3*square_x + i][3*square_y + j])
                        else:
                            valid = False
                            break
        if (len(numbers) > 0):
            valid = False


        self.assertEqual(valid, True)

    def testOneRow(self):
        sud = (' -------------------------------------\n'
        + '| 5 | 3 | 4 || 6 | 7 | 8 || 9 | 1 | 2 |\n'
        + '-------------------------------------\n'
        + '| 6 | 7 | 2 || 1 | 9 | 5 || 3 | 4 | 8 |\n'
        + '-------------------------------------\n'
        + '| 1 | 9 | 8 || 3 | 4 | 2 || 5 | 6 | 7 |\n'
        + ' =====================================\n'
         + '| 8 | 5 | 9 || 7 | 6 | 1 || 4 | 2 | 3 |\n'
        + ' -------------------------------------\n'
        + '| 4 | 2 | 6 || 8 | 5 | 3 || 7 | 9 | 1 |\n'
        + ' -------------------------------------\n'
         + '| 7 | 1 | 3 || 9 | 2 | 4 || 8 | 5 | 6 |\n'
        + ' =====================================\n'
         + '| 9 | 6 | 1 || 5 | 3 | 7 || 2 | 8 | 4 |\n'
        + ' -------------------------------------\n'
         + '| 2 | 8 | 7 || 4 | 1 | 9 || 6 | 3 | 5 |\n'
        + ' -------------------------------------\n'
         + '|   |   |   ||   |   |   ||   |   |   |\n'
        + ' -------------------------------------\n')
        S = sudoku.Sudoku()
        S.readInputSudoku(sud)
        S.solveSudoku()
        self.assertEqual('534678912\n672195348\n198342567\n859761423\n426853791\n713924856\n961537284\n287419635\n345286179\n', S.solutionString)
    def test_squares(self):
        sud = (' -------------------------------------\n'
        + '| 5 | 3 | 4 || 6 | 7 | 8 || 9 | 1 | 2 |\n'
        + '-------------------------------------\n'
        + '| 6 |   | 2 || 1 | 9 | 5 || 3 | 4 | 8 |\n'
        + '-------------------------------------\n'
        + '| 1 | 9 | 8 ||   | 4 | 2 || 5 |   | 7 |\n'
        + ' =====================================\n'
         + '| 8 | 5 | 9 || 7 | 6 | 1 ||   | 2 | 3 |\n'
        + ' -------------------------------------\n'
        + '| 4 | 2 | 6 || 8 | 5 | 3 || 7 | 9 | 1 |\n'
        + ' -------------------------------------\n'
         + '| 7 | 1 | 3 || 9 |   | 4 || 8 | 5 | 6 |\n'
        + ' =====================================\n'
         + '|   | 6 | 1 || 5 | 3 | 7 || 2 | 8 | 4 |\n'
        + ' -------------------------------------\n'
         + '| 2 | 8 | 7 || 4 | 1 | 9 || 6 | 3 | 5 |\n'
        + ' -------------------------------------\n'
         + '|   |   |   ||   |   |   ||   |   |   |\n'
        + ' -------------------------------------\n')
        S = sudoku.Sudoku()
        S.readInputSudoku(sud)
        S.solveSudoku()
        self.assertEqual('534678912\n672195348\n198342567\n859761423\n426853791\n713924856\n961537284\n287419635\n345286179\n', S.solutionString)


    def testTwoRows(self):
        sud = (' -------------------------------------\n'
        + '|   |   |   ||   |   |   ||   |   |   |\n'
        + '-------------------------------------\n'
        + '| 6 | 7 | 2 || 1 | 9 | 5 || 3 | 4 | 8 |\n'
        + '-------------------------------------\n'
        + '| 1 | 9 | 8 || 3 | 4 | 2 || 5 | 6 | 7 |\n'
        + ' =====================================\n'
         + '| 8 | 5 | 9 || 7 | 6 | 1 || 4 | 2 | 3 |\n'
        + ' -------------------------------------\n'
        + '| 4 | 2 | 6 || 8 | 5 | 3 || 7 | 9 | 1 |\n'
        + ' -------------------------------------\n'
         + '| 7 | 1 | 3 || 9 | 2 | 4 || 8 | 5 | 6 |\n'
        + ' =====================================\n'
         + '| 9 | 6 | 1 || 5 | 3 | 7 || 2 | 8 | 4 |\n'
        + ' -------------------------------------\n'
         + '| 2 | 8 | 7 || 4 | 1 | 9 || 6 | 3 | 5 |\n'
        + ' -------------------------------------\n'
         + '|   |   |   ||   |   |   ||   |   |   |\n'
        + ' -------------------------------------\n')
        S = sudoku.Sudoku()
        S.readInputSudoku(sud)
        S.solveSudoku()
        self.assertEqual('534678912\n672195348\n198342567\n859761423\n426853791\n713924856\n961537284\n287419635\n345286179\n', S.solutionString)

    def test_sudoku_hard(self):
        sud = (' -------------------------------------\n'
        + '|   | 5 | 3 || 1 | 6 |   || 2 |   | 8 |\n'
        + '-------------------------------------\n'
        + '| 4 | 8 |   ||   | 7 |   || 1 |   | 6 |\n'
        + '-------------------------------------\n'
        + '|   | 1 |   ||   |   |   ||   |  5 | 9 |\n'
        + ' =====================================\n'
         + '|   | 7 |   ||   | 3 |   || 4 |   |   |\n'
        + ' -------------------------------------\n'
        + '|   |   |   ||   | 5 |   ||   |   |   |\n'
        + ' -------------------------------------\n'
         + '|   |   | 6 ||   | 1 |   ||   | 8 |   |\n'
        + ' =====================================\n'
         + '| 2 | 3 |   ||   |   |   ||   | 7 |   |\n'
        + ' -------------------------------------\n'
         + '| 5 |   | 8 ||   | 4 |   ||   | 2 | 3 |\n'
        + ' -------------------------------------\n'
         + '| 1 |   | 7 ||   | 2 | 3 || 8 | 6 |   |\n'
        + ' -------------------------------------\n')
        S = sudoku.Sudoku()
        S.readInputSudoku(sud)
        S.solveSudoku()
        self.assertEqual('753169248\n489275136\n612384759\n875936412\n341852697\n926417385\n234698571\n568741923\n197523864\n', S.solutionString)

    def test_sudoku_wrong(self):
        sud = (' -------------------------------------\n'
        + '|   | 5 | 3 || 1 | 6 |   || 2 |   | 8 |\n'
        + '-------------------------------------\n'
        + '| 4 | 8 |   ||   | 7 |   || 1 |   | 6 |\n'
        + '-------------------------------------\n'
        + '|   | 1 |   ||   |   |   ||   |  5 | 9 |\n'
        + ' =====================================\n'
         + '|   | 7 |   ||   | 3 |   || 4 |   |   |\n'
        + ' -------------------------------------\n'
        + '|   |   |   ||   | 5 |   ||   |   |   |\n'
        + ' -------------------------------------\n'
         + '|   |   | 6 ||   | 2 |   ||   | 8 |   |\n'
        + ' =====================================\n'
         + '| 2 | 3 |   ||   |   |   ||   | 7 |   |\n'
        + ' -------------------------------------\n'
         + '| 5 |   | 8 ||   | 4 |   ||   | 2 | 3 |\n'
        + ' -------------------------------------\n'
         + '| 1 |   | 7 ||   | 2 | 3 || 8 | 6 |   |\n'
        + ' -------------------------------------\n')
        S = sudoku.Sudoku()
        S.readInputSudoku(sud)
        S.solveSudoku()
        self.assertEqual('NO', S.solutionString)



if __name__ == '__main__':
	unittest.main()
